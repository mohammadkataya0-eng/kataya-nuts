<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Kataya Nuts Admin Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-white text-gray-800 font-sans min-h-screen flex flex-col">
  <header class="bg-[#b51916] text-white px-6 py-4 flex justify-between items-center">
    <h1 class="text-2xl font-bold">Kataya Nuts Admin</h1>
    <div class="flex gap-2">
      <button onclick="openChangePasswordModal()" class="bg-yellow-400 text-black font-semibold px-4 py-2 rounded hover:bg-yellow-500 transition">üîí Change Password</button>
      <button onclick="logout()" class="bg-white text-[#b51916] font-semibold px-4 py-2 rounded hover:bg-[#d89a63] hover:text-white transition">üö™ Logout</button>
    </div>
  </header>

  <main class="container mx-auto px-6 py-10 flex-grow">
    <h2 class="text-3xl font-bold text-[#b51916] mb-6">üõ†Ô∏è Admin Dashboard</h2>

    <!-- Password Modal -->
    <div id="passwordModal" class="fixed inset-0 bg-black bg-opacity-40 flex justify-center items-center hidden z-50">
      <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
        <h3 class="text-xl font-semibold mb-4">Change Password</h3>
        <form id="changePasswordForm" onsubmit="submitPasswordChange(event)" class="space-y-4">
          <input type="password" id="oldPassword" placeholder="Current Password" required class="w-full border p-2 rounded" />
          <input type="password" id="newPassword" placeholder="New Password" required class="w-full border p-2 rounded" />
          <div class="flex justify-end gap-2">
            <button type="button" onclick="closeChangePasswordModal()" class="bg-gray-300 text-black px-4 py-2 rounded">Cancel</button>
            <button type="submit" class="bg-[#b51916] text-white px-4 py-2 rounded">Update</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Section: Manage Categories -->
    <section class="mb-10">
      <details open>
        <summary class="text-xl font-semibold cursor-pointer mb-2">‚ûï Manage Categories</summary>
        <form id="categoryForm" class="flex flex-wrap gap-4 mb-4">
          <input type="text" id="categoryName" placeholder="Category Name" class="border p-2 rounded w-64" required />
          <input type="number" id="categoryPosition" placeholder="Position" class="border p-2 rounded w-32" required />
          <button type="submit" class="bg-[#b51916] text-white px-4 py-2 rounded hover:bg-[#d89a63]">Add</button>
        </form>
        <ul id="categoryList" class="space-y-2"></ul>
      </details>
    </section>

    <!-- Section: Manage Items -->
<!-- Section: Manage Items -->
<section>
  <details open>
    <summary class="text-xl font-semibold cursor-pointer mb-2">üõí Manage Items</summary>

    <!-- ‚úÖ Category Filter -->
    <select id="filterCategory" class="border p-2 rounded mb-4 w-full sm:w-64">
      <option value="">All Categories</option>
    </select>

    <!-- ‚úÖ Item Form -->
    <form id="itemForm" class="grid grid-cols-1 md:grid-cols-3 gap-4 my-4" enctype="multipart/form-data">
      <input type="text" id="itemName" placeholder="Item name" class="border p-2 rounded" required />
      <input type="number" step="0.01" id="itemPrice" placeholder="Price per kg" class="border p-2 rounded" required />
      <select id="itemCategory" class="border p-2 rounded" required>
        <option value="">Select category</option>
      </select>
      <input type="number" id="itemPosition" placeholder="Position" class="border p-2 rounded" required />
      <label class="flex items-center gap-2">
        <input type="checkbox" id="itemIsCountBased" />
        Count Based (e.g. pieces instead of kg)
      </label>
      <input type="file" id="itemImage" accept="image/*" class="border p-2 rounded" />
      <input type="hidden" id="itemId" />
      <button type="submit" class="col-span-full bg-[#b51916] text-white px-4 py-2 rounded hover:bg-[#d89a63]">Save Item</button>
    </form>

    <!-- ‚úÖ List of Items -->
    <ul id="itemList" class="space-y-2"></ul>
  </details>
</section>

  </main>
  <script>
    const token = localStorage.getItem("kataya_admin_token");

    function logout() {
      localStorage.removeItem("kataya_admin_token");
      window.location.href = "/admin-login";
    }

    function openChangePasswordModal() {
      document.getElementById('passwordModal').classList.remove('hidden');
    }

    function closeChangePasswordModal() {
      document.getElementById('passwordModal').classList.add('hidden');
      document.getElementById('oldPassword').value = '';
      document.getElementById('newPassword').value = '';
    }

    async function submitPasswordChange(e) {
      e.preventDefault();
      const currentPassword = document.getElementById('oldPassword').value;
      const newPassword = document.getElementById('newPassword').value;

      const res = await fetch('/api/admin/change-password', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + token
        },
        body: JSON.stringify({ currentPassword, newPassword })
      });

      const data = await res.json();

      if (res.ok) {
        alert('Password updated successfully!');
        closeChangePasswordModal();
      } else {
        alert(data.message || 'Failed to update password');
      }
    }

    async function fetchCategories() {
      const res = await fetch('/api/categories', { headers: { Authorization: 'Bearer ' + token } });
      const categories = await res.json();

      // Sort by position
      categories.sort((a, b) => a.position - b.position);

      const select = document.getElementById('itemCategory');
      const filter = document.getElementById('filterCategory');
      const list = document.getElementById('categoryList');
      select.innerHTML = '<option value="">Select category</option>';
      filter.innerHTML = '<option value="">All Categories</option>';
      list.innerHTML = '';

      categories.forEach(cat => {
        select.innerHTML += `<option value="${cat._id}">${cat.name}</option>`;
        filter.innerHTML += `<option value="${cat._id}">${cat.name}</option>`;

        const li = document.createElement('li');
        li.className = 'flex justify-between items-center bg-gray-100 p-2 rounded';

        const input = document.createElement('input');
        input.value = `${cat.name} (Pos: ${cat.position})`;
        input.disabled = true;
        input.className = 'bg-transparent font-bold';

        const actions = document.createElement('div');
        actions.className = 'space-x-2';
        actions.innerHTML = `
          <button onclick="editCategory(this, '${cat._id}')" class="text-blue-600 hover:underline">Edit</button>
          <button onclick="deleteCategory('${cat._id}')" class="text-red-600 hover:underline">Delete</button>
          <button onclick="toggleArchiveCategory('${cat._id}', ${cat.archived})" class="text-yellow-600 hover:underline">
            ${cat.archived ? 'Unarchive' : 'Archive'}
          </button>
        `;

        li.appendChild(input);
        li.appendChild(actions);
        list.appendChild(li);
      });
    }

    async function editCategory(button, id) {
      const input = button.parentElement.previousSibling;
      input.disabled = false;
      input.focus();
      button.textContent = 'Save';
      button.onclick = async () => {
        const [namePart, posPart] = input.value.split('(Pos:');
        const name = namePart.trim();
        const position = parseInt(posPart?.replace(')', '') || 0);

        await fetch(`/api/categories/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            Authorization: 'Bearer ' + token
          },
          body: JSON.stringify({ name, position })
        });
        fetchCategories();
      }
    }

    async function deleteCategory(id) {
      if (!confirm("Delete this category?")) return;
      await fetch(`/api/categories/${id}`, {
        method: 'DELETE',
        headers: { Authorization: 'Bearer ' + token }
      });
      fetchCategories();
    }

    async function toggleArchiveCategory(id, isArchived) {
      await fetch(`/api/categories/${id}/archive`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + token
        },
        body: JSON.stringify({ archived: !isArchived })
      });
      fetchCategories();
    }

    async function fetchItems() {
      const categoryId = document.getElementById('filterCategory').value;
      const res = await fetch('/api/items', { headers: { Authorization: 'Bearer ' + token } });
      const items = await res.json();
      const list = document.getElementById('itemList');
      list.innerHTML = '';

      const filtered = categoryId ? items.filter(i => i.category?._id === categoryId) : items;
      filtered.sort((a, b) => a.position - b.position);

      filtered.forEach(i => {
        const li = document.createElement('li');
        li.className = 'flex items-center justify-between bg-gray-100 p-2 rounded';

        const img = document.createElement('img');
        img.src = i.image || 'https://via.placeholder.com/60';
        img.className = 'w-16 h-16 object-cover rounded';

        const desc = document.createElement('div');
        desc.innerHTML = `ü•ú <strong>${i.name}</strong> - $${i.pricePerKg} / ${i.isCountBased ? 'count' : 'kg'} (${i.category?.name || 'N/A'}) [Pos: ${i.position}] ${i.archived ? '<span class="text-red-500">(archived)</span>' : ''}`;

        const actions = document.createElement('div');
        actions.className = 'space-x-2 text-sm';
        actions.innerHTML = `
          <button onclick="loadItemForEdit('${i._id}', '${i.name}', ${i.pricePerKg}, '${i.category?._id || ''}', ${i.position}, ${i.isCountBased})" class="text-blue-600 hover:underline">Edit</button>
          <button onclick="deleteItem('${i._id}', '${i.image || ''}')" class="text-red-600 hover:underline">Delete</button>
          <button onclick="toggleArchiveItem('${i._id}', ${i.archived})" class="text-yellow-600 hover:underline">
            ${i.archived ? 'Unarchive' : 'Archive'}
          </button>
        `;

        li.appendChild(img);
        li.appendChild(desc);
        li.appendChild(actions);
        list.appendChild(li);
      });
    }


    function loadItemForEdit(id, name, price, categoryId, position, isCountBased = false) {
      document.getElementById('itemId').value = id;
      document.getElementById('itemName').value = name;
      document.getElementById('itemPrice').value = price;
      document.getElementById('itemCategory').value = categoryId;
      document.getElementById('itemPosition').value = position;
      document.getElementById('itemIsCountBased').checked = isCountBased;
    }

    document.getElementById('itemForm').addEventListener('submit', async e => {
      e.preventDefault();
      const id = document.getElementById('itemId').value;
      const formData = new FormData();
      formData.append('name', document.getElementById('itemName').value);
      formData.append('pricePerKg', document.getElementById('itemPrice').value);
      formData.append('category', document.getElementById('itemCategory').value);
      formData.append('position', document.getElementById('itemPosition').value);
      formData.append('isCountBased', document.getElementById('itemIsCountBased').checked);
      const file = document.getElementById('itemImage').files[0];
      if (file) formData.append('image', file);
      const endpoint = id ? `/api/items/${id}` : '/api/items';
      const method = id ? 'PUT' : 'POST';
      await fetch(endpoint, {
        method,
        headers: { Authorization: 'Bearer ' + token },
        body: formData
      });
      e.target.reset();
      document.getElementById('itemId').value = '';
      fetchItems();
    });

    async function deleteItem(id, imagePath) {
      if (!confirm("Delete this item and its image?")) return;
      await fetch(`/api/items/${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + token
        },
        body: JSON.stringify({ imagePath })
      });
      fetchItems();
    }

    async function toggleArchiveItem(id, archived) {
      await fetch(`/api/items/${id}/archive`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + token
        },
        body: JSON.stringify({ archived: !archived })
      });
      fetchItems();
    }

    document.getElementById('categoryForm').addEventListener('submit', async e => {
      e.preventDefault();
      const name = document.getElementById('categoryName').value;
      const position = parseInt(document.getElementById('categoryPosition').value, 10);
      await fetch('/api/categories', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + token
        },
        body: JSON.stringify({ name, position })
      });
      e.target.reset();
      fetchCategories();
    });

    document.getElementById('itemForm').addEventListener('submit', async e => {
      e.preventDefault();
      const id = document.getElementById('itemId').value;
      const formData = new FormData();
      formData.append('name', document.getElementById('itemName').value);
      formData.append('pricePerKg', document.getElementById('itemPrice').value);
      formData.append('category', document.getElementById('itemCategory').value);
      formData.append('position', document.getElementById('itemPosition').value);
      const file = document.getElementById('itemImage').files[0];
      if (file) formData.append('image', file);
      const endpoint = id ? `/api/items/${id}` : '/api/items';
      const method = id ? 'PUT' : 'POST';
      await fetch(endpoint, {
        method,
        headers: { Authorization: 'Bearer ' + token },
        body: formData
      });
      e.target.reset();
      document.getElementById('itemId').value = '';
      fetchItems();
    });

    document.getElementById('filterCategory').addEventListener('change', fetchItems);

    fetchCategories();
    fetchItems();
  </script>
</body>
</html>